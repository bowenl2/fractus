/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CredentialsFrame.java
 *
 * Created on Sep 15, 2010, 2:51:07 PM
 */

package us.fract.gui;

import us.fract.main.Fractus;

/**
 *
 * @author bowenl2
 */
public class CredentialsFrame extends javax.swing.JFrame {

    /** Creates new form CredentialsFrame */
    public static CredentialsFrame getInstance() { return instance; }
    private CredentialsFrame() {
        initComponents();
        validateForm(null);
    }
    private static CredentialsFrame instance = new CredentialsFrame();

    protected Fractus fractus;

    /**
     * Set the value of fractus
     *
     * @param fractus new value of fractus
     */
    public void setFractus(Fractus fractus) {
        this.fractus = fractus;
    }

    protected String serverAddress;

    /**
     * Get the value of serverAddress
     *
     * @return the value of serverAddress
     */
    public String getServerAddress() {
        return serverAddress;
    }

    
    protected Integer serverPort;

    /**
     * Get the value of serverPort
     *
     * @return the value of serverPort
     */
    public Integer getServerPort() {
        return serverPort;
    }

    protected String username;

    /**
     * Get the value of username
     *
     * @return the value of username
     */
    public String getUsername() {
        return username;
    }

    protected String password;

    /**
     * Get the value of password
     *
     * @return the value of password
     */
    public String getPassword() {
        return password;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        serverLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        serverField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fractus Credentials");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("CredentialsFrame"); // NOI18N
        setResizable(false);

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        serverLabel.setText("Server");

        usernameField.setText("bowenl2");
        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm(evt);
            }
        });

        serverField.setText("localhost:1337");
        serverField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm(evt);
            }
        });

        passwordField.setText("jPasswordField1");
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                validateForm(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                        .addComponent(usernameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addGap(25, 25, 25)
                        .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                        .addComponent(serverLabel)
                        .addGap(43, 43, 43)
                        .addComponent(serverField, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                    .addComponent(connectButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLabel)
                    .addComponent(serverField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(connectButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (fractus == null) return;
        fractus.initialize(serverAddress, serverPort, username, password);
        setVisible(false);
    }//GEN-LAST:event_connectButtonActionPerformed

    private void validateForm(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_validateForm
        // Username Field
        int unLen = usernameField.getText().length();
        if (unLen < 4 || unLen > 32) {
            invalidateData();
            return;
        }

        username = usernameField.getText();

        // Password Field
        int pwLen = passwordField.getPassword().length;
        if (pwLen < 4) {
            invalidateData();
            return;
        }

        password = String.valueOf(passwordField.getPassword());

        // Server Field
        serverPort = 1337;
        String serverText = serverField.getText();
        int colonIndex = serverText.indexOf(":");
        if (colonIndex != -1) {
            if (serverText.indexOf(username, colonIndex) != -1) {
                invalidateData();
                return;
            }
            serverAddress = serverText.substring(0, colonIndex);
            try {
                serverPort = Integer.parseInt(serverText.substring(colonIndex+1));
            } catch (NumberFormatException e) {
                invalidateData();
                return;
            }
        } else {
            serverAddress = serverText;
        }

        connectButton.setEnabled(true);
    }//GEN-LAST:event_validateForm

    private void invalidateData() {
        connectButton.setEnabled(false);
        serverAddress = null;
        serverPort = null;
        username = null;
        password = null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField serverField;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

}
