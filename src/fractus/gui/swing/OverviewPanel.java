/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OverviewPanel.java
 *
 * Created on Sep 15, 2010, 10:53:59 PM
 */
package fractus.gui.swing;

import fractus.main.Delegate;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import fractus.net.EncryptionManager;
import fractus.main.Fractus;
import fractus.net.RouteManager;

/**
 *
 * @author bowenl2
 */
public class OverviewPanel extends javax.swing.JPanel {

    /** Creates new form OverviewPanel */
    public OverviewPanel(Fractus fractus) throws IOException {
        this.fractus = fractus;
        this.encryptionManager = fractus.getEncryptionManager();
        initComponents();
        bindData();
    }
    protected EncryptionManager encryptionManager;
    protected Fractus fractus;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taskScroll = new javax.swing.JScrollPane();

        taskScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane taskScroll;
    // End of variables declaration//GEN-END:variables

    protected PropertyChangeListener encryptionPCL;
    protected PropertyChangeListener credentialsPCL;
    protected PropertyChangeListener routePCL;
    

    private void bindData() throws IOException {
        JPanel view = new JPanel();
        view.setLayout(new BoxLayout(view, BoxLayout.Y_AXIS));

        // Create TaskOverviewPanels

        // Credentials
        final TaskOverviewPanel credentialPromptTOP =
                new TaskOverviewPanel("Input Credentials", Images.Path.CREDENTIALS);
        credentialsPCL = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("userCredentials")) {
                    credentialPromptTOP.setBusyState(false);
                }
            }
        };
        fractus.addPropertyChangeListener(credentialsPCL);

        if (encryptionManager.isKeyPairReady()) {
            credentialPromptTOP.setBusyState(false);
        }

        // Keypair Ready
        final TaskOverviewPanel keyPairReadyTOP = new TaskOverviewPanel("Generate EC Keypair", Images.Path.CERTIFICATE);
        encryptionPCL = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("keyPairReady")) {
                    keyPairReadyTOP.setBusyState(false);
                }
            }
        };
        encryptionManager.addPropertyChangeListener(encryptionPCL);
        keyPairReadyTOP.setBusyState(!encryptionManager.isKeyPairReady());


        // Determine Incoming Route / UPnP
        final TaskOverviewPanel routeTOP =
                new TaskOverviewPanel("Create Incoming Route", Images.Path.NETWORK);
        RouteManager routeManager = fractus.getRouteManager();
        routePCL = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("isEstablished")) {
                    routeTOP.setBusyState(!(Boolean)evt.getNewValue());
                }
            }
        };
        routeManager.addPropertyChangeListener(routePCL);

        // Publish Keypair, Location
        

        // Retrieve Peer Data
        
        
        view.add(keyPairReadyTOP);
        view.add(credentialPromptTOP);
        view.add(routeTOP);

        view.validate();
        taskScroll.setViewportView(view);
    }
}
