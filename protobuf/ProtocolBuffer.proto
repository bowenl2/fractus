
option java_package = "fractus.net";

message InstantMessage {
	required string contents = 1;
}

message ClientInfo {
    optional string version = 1;
    optional string location = 2;
}

message ContactDataReq {
  repeated string usernames = 1;
}

message ContactData {
  required string username = 1;
  repeated Location location = 2;
}

message ContactDataRes {
  enum ResponseCode {
    SUCCESS = 0;
    SERVER_ERROR = 1;
    AUTHENTICATION_FAILURE = 2;
  }
  required ResponseCode code = 1;

  // The actual contacts:
  repeated ContactData contact_data = 2;
}

message ProtocolError {
	required int32 code = 1;
}

message CipherCapabilities {
	repeated CipherSuite cipher_suites = 1;
}

message CipherSuite {
	optional string public_key_type = 1;
	optional string secret_establishment_algorithm = 2;
	optional string key_derivation_function = 3;
	optional string cipher_algorithm = 4;
	optional string cipher_mode = 5;
	optional int32 cipher_key_size = 6;
}

message HandshakeData {
	optional string public_key_encoding = 1;
    optional bytes public_key = 2;
    optional bytes nonce = 3;
    optional string certificate_authority = 4;
}

// Key registration

message RegisterKeyReq {
    required string username = 1;
    required string password = 2;
}

message RegisterKeyRes {
  enum ResponseCode {
    SUCCESS = 0;
    AUTHENTICATION_FAILURE = 1;
    DUPLICATE_KEY = 2;
    SERVER_ERROR = 3;
  }
  required ResponseCode code = 1;
}

// Key identification

message IdentifyKeyReq {
    required string encoding = 1;
    required bytes public_key = 2;
}

message IdentifyKeyRes {
  enum ResponseCode {
    SUCCESS = 0;
    UNKNOWN_KEY = 1; // If key is not in database ||
		     //requestor not contact with target
    AUTHORIZATION_FAILURE = 2;    
  }
  required ResponseCode code = 1;
  optional string username = 2;
}

// Key revocation

message RevokeKeyReq {

}

message RevokeKeyRes {
  enum ResponseCode {
    SUCCESS = 0;
    SERVER_ERROR = 1;
    AUTHORIZATION_FAILURE = 2;
  }
  required ResponseCode code = 1;
}

//////////////
// Location //
//////////////

message Location {
    optional string address = 1;
    optional int32 port = 2;
}

message RegisterLocationReq {
    repeated Location location_list = 1;
}

message RegisterLocationRes {
  enum ResponseCode {
    SUCCESS = 0;
    AUTHORIZATION_FAILURE = 1;
    DUPLICATE_KEY = 2;
    INTERNAL_ERROR = 3;
  }
  required ResponseCode code = 1;
}

//////////////
// Contacts //
//////////////

message AddContactReq {
  optional string username = 1;
  optional string message = 2;
}

message AddContactRes {
  enum ResponseCode {
    SUCCESS = 0;
    INVALID = 1; // Redundant add or no such username
    SERVER_ERROR = 2;
    AUTHORIZATION_FAILURE = 3;
  }
  required ResponseCode code = 1;
}

message RemoveContactReq {
  optional string username = 1;
}

message RemoveContactRes {
  enum ResponseCode {
    SUCCESS = 0;
    INVALID = 1;  // No such username or no such existing contact.
    SERVER_ERROR = 2;
    AUTHORIZATION_FAILURE = 3;
  }
  required ResponseCode code = 1;
}
